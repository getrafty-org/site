<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="supported-color-schemes" content="light dark">
    <meta name="theme-color" content="hsl(220, 20%, 100%)" media="(prefers-color-scheme: light)">
    <meta name="theme-color" content="hsl(220, 20%, 10%)" media="(prefers-color-scheme: dark)">

    <script>
        (function () {
            const savedTheme = localStorage.getItem('theme');
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');

            document.documentElement.dataset.theme = initialTheme;

            const highlightTheme = initialTheme === 'dark'
                ? 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css'
                : 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css';
            document.write(`<link id="highlight-theme" rel="stylesheet" href="${highlightTheme}">`);
        })();
    </script>


    <link rel="stylesheet" href="/static/main.css">
    <link rel="stylesheet" href="/static/icomoon.css">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/img/rafty64.webp">
    <link rel="canonical" href="{{ url |> url(true) }}">
    <title>Getrafty.org</title>
</head>

<body>
<header>
    <nav class="navbar">
        <ul class="navbar-links">
            <li>
                <button class="button theme-toggle">
                    <a class="icon icon-magic" aria-hidden="true"></a>
                </button>
            </li>
            <li>
                <button class="button">
                    <a class="icon icon-github" aria-hidden="true"
                       href="https://github.com/sidosera/getrafty/blob/main/site/src/"
                       target="_blank"></a>
                </button>
            </li>
        </ul>
    </nav>
</header>

<main>
    <a href="/index">cd ~/</a>
    {{ content }}
</main>

<!-- Place scripts at the end for better performance -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/bash.min.js"></script>
<script>
    const darkBackgroundColor = {r: 13, g: 17, b: 23};
    const themes = {
        light: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css',
        dark: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css'
    }

    function currentTheme() {
        return localStorage.getItem('theme') || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" :
            "light");
    }


    function toggleTheme() {
        setThemeAsync(currentTheme() === "dark" ? "light" : "dark");
    }

    async function postProcessImages() {
        const images = document.querySelectorAll('img');
        await Promise.all([...images].map(async (image) => {
                const canvas = (image.nextElementSibling?.tagName === 'CANVAS') ? image.nextElementSibling : false;
                if (!canvas) {
                    return;
                }

                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(image, 0, 0);

                if (currentTheme() !== "dark") {
                    return
                }


                const whiteThreshold = 230;

                const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
                const data = imageData.data;

                for (let i = 0; i < data.length; i += 4) {
                    if (data[i] > whiteThreshold && data[i + 1] > whiteThreshold && data[i + 2] > whiteThreshold) {
                        data[i] = darkBackgroundColor.r;
                        data[i + 1] = darkBackgroundColor.g;
                        data[i + 2] = darkBackgroundColor.b;
                    } else {
                        data[i] = 255 - data[i];
                        data[i + 1] = 255 - data[i + 1];
                        data[i + 2] = 255 - data[i + 2];
                    }
                }

                ctx.putImageData(imageData, 0, 0);
            }
        ));

    }

    window.addEventListener('DOMContentLoaded', async () => {
        document.querySelector('.theme-toggle').addEventListener('click', toggleTheme);

        // Post process images
        const images = document.querySelectorAll('img');
        await Promise.all([...images].map(async (image) => {
            if (!image.dataset.originalSrc) {
                image.dataset.originalSrc = image.src;
            }

            function newCanvas() {
                const canvas = document.createElement('canvas');
                canvas.className = 'imageCanvas';
                const styles = getComputedStyle(image);
                Object.assign(canvas.style, {
                    width: styles.width,
                    height: styles.height,
                    objectFit: styles.objectFit,
                    maxWidth: styles.maxWidth,
                    maxHeight: styles.maxHeight,
                    display: 'block',
                });
                image.parentNode.insertBefore(canvas, image.nextSibling);
                return canvas;
            }

            const canvas = (image.nextElementSibling?.tagName === 'CANVAS') ? image.nextElementSibling : newCanvas();
            if (!canvas) {
                return;
            }
            canvas.width = image.naturalWidth;
            canvas.height = image.naturalHeight;
            image.style.display = 'none';
            image.parentNode.insertBefore(canvas, image.nextSibling);

            return image;
        }));

        // Post process headers
        const headers = document.querySelectorAll("h1, h2, h3");
        await Promise.all([...headers].map(async (header) => {
            if (!header.id) {
                const slug = header.textContent.trim().toLowerCase()
                    .replace(/\s+/g, '-')
                    .replace(/[^\w-]/g, '');
                header.id = slug;

                const anchor = document.createElement('a');
                anchor.href = `#${slug}`;
                anchor.className = 'anchor-link';
                anchor.textContent = header.textContent;

                header.textContent = '';
                header.appendChild(anchor);
            }
        }));
    });


    window.addEventListener('load', async () => {
        await setThemeAsync(currentTheme());
    });

    async function setThemeAsync(currentTheme) {
        document.documentElement.dataset.theme = currentTheme;
        localStorage.setItem('theme', currentTheme);
        document.getElementById('highlight-theme').href = themes[currentTheme];

        await postProcessImages();

        requestAnimationFrame(() => hljs.highlightAll()); // Syntax highlighting after canvas processing
    }

</script>
</body>
</html>
